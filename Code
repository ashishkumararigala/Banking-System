class Account:

    def __init__(self, account_holder, account_number, balance=0):
        self.account_holder = account_holder
        self.balance = balance

        if self.validate_account_number(account_number):
            self.account_number = account_number
        else:
            raise ValueError("Account number must be exactly 12 digits long.")

    def validate_account_number(self, account_number):
        return len(str(account_number)) == 12

    def deposit(self, amount):
        self.balance += amount
        print(f"Deposited ${amount}. Current balance: ${self.balance}")

    def withdraw(self, amount):
        if amount <= self.balance:
            self.balance -= amount
            print(f"Withdrew ${amount}. Current balance: ${self.balance}")
        else:
            print("Insufficient funds!")

    def display_balance(self):
        print(f"Account Holder: {self.account_holder}")
        print(f"Account Number: {self.account_number}")
        print(f"Current Balance: ${self.balance}")


class SavingsAccount(Account):
    def __init__(self, account_holder, account_number, balance=0, interest_rate=0.02):
        super().__init__(account_holder, account_number, balance)
        self.interest_rate = interest_rate

    def add_interest(self):
        interest = self.balance * self.interest_rate
        self.balance += interest
        print(f"Added interest. Current balance: ${self.balance}")


class CreditCardAccount(Account):
    def __init__(self, account_holder, account_number, balance=0, credit_limit=0):
        super().__init__(account_holder, account_number, balance)
        self.credit_limit = credit_limit

    def apply_for_credit_card(self):
        print("Credit card application in progress...")
        # Include logic to get credit card details from the user, e.g., credit limit
        self.credit_limit = float(input("Enter desired credit limit for the credit card: "))


    def display_credit_limit(self):
        print(f"Credit Limit: ${self.credit_limit}")

    def apply_interest(account, interest_function):
        interest_function(account)

    calculate_simple_interest = lambda account: account.deposit(account.balance * 0.05)


if __name__ == "__main__":
    account_holder = input("Enter account holder name for basic account: ")
    account_number = input("Enter a 12-digit account number for basic account: ")

    while not len(account_number) == 12 or not account_number.isdigit():
        print("Invalid account number. Please enter a 12-digit number.")
        account_number = input("Enter a 12-digit account number for basic account: ")
    initial_balance = float(input("Enter initial balance for basic account: "))

    basic_account = Account(account_holder=account_holder, account_number=int(account_number), balance=initial_balance)

    deposit_amount = float(input("Enter deposit amount for basic account: "))
    basic_account.deposit(deposit_amount)
    withdraw_amount = float(input("Enter withdrawal amount for basic account: "))
    basic_account.withdraw(withdraw_amount)
    basic_account.display_balance()

    account_holder = input("Enter account holder name for savings account: ")
    account_number = input("Enter a 12-digit account number for savings account: ")

    while not len(account_number) == 12 or not account_number.isdigit():
        print("Invalid account number. Please enter a 12-digit number.")
        account_number = input("Enter a 12-digit account number for savings account: ")

    initial_balance = float(input("Enter initial balance for savings account: "))


    savings_account = SavingsAccount(account_holder=account_holder, account_number=int(account_number),
                                     balance=initial_balance)

    deposit_amount = float(input("Enter deposit amount for savings account: "))
    savings_account.deposit(deposit_amount)
    withdraw_amount = float(input("Enter withdrawal amount for savings account: "))
    savings_account.withdraw(withdraw_amount)
    savings_account.add_interest()
    interest_rate=0.02
    savings_account.display_balance()

    apply_for_credit_card = input("Do you want to apply for a credit card? (yes/no): ").lower()

    if apply_for_credit_card == "yes":
        credit_card_account = CreditCardAccount(account_holder=account_holder,
                                                account_number=int(account_number),
                                                balance=initial_balance)
        credit_card_account.apply_for_credit_card()
        credit_card_account.display_credit_limit()
    else:
        print("No credit card application. Exiting program.")
        exit()


    def collect_applicant_info():
        applicant_name = input("Enter your full name: ")
        annual_income = float(input("Enter your annual income: "))
        years_at_current_job = int(input("Enter the number of years at your current job: "))
        credit_score = int(input("Enter your credit score: "))

        applicant_info = {
            "name": applicant_name,
            "annual_income": annual_income,
            "years_at_current_job": years_at_current_job,
            "credit_score": credit_score
        }

        return applicant_info



    #  eligibility
    def evaluate_eligibility(applicant_info):
        if applicant_info["annual_income"] >= 30000 and applicant_info["years_at_current_job"] >= 1 and applicant_info[
            "credit_score"] >= 600:
            return True
        else:
            return False



    def display_results(applicant_info, eligible):
        if eligible:
            print("Congratulations, " + applicant_info["name"] + "! You are pre-approved for a credit card.")
        else:
            print("We regret to inform you that you are not currently eligible for a credit card.")
            print("Please review our eligibility criteria and reapply at a later time.")



    applicant_info = collect_applicant_info()
    eligible = evaluate_eligibility(applicant_info)
    display_results(applicant_info, eligible)

